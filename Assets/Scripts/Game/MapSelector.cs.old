using UnityEngine;
using BaboonTower.Game;

/// <summary>
/// Permet de changer de map facilement pendant les tests
/// </summary>
public class MapSelector : MonoBehaviour
{
    [Header("Map Selection")]
    [SerializeField] private string currentMapId = "forest_easy";
    [SerializeField] private bool regenerateOnChange = true;
    
    [Header("Available Maps")]
    [SerializeField] private string[] availableMaps = new string[]
    {
        "forest_easy",
        "forest_medium", 
        "desert_hard",
        "snow_extreme"
    };
    
    private MapGenerator generator;
    private MapManagerV2 mapManager;
    private int currentMapIndex = 0;
    
    private void Start()
    {
        generator = GetComponent<MapGenerator>();
        mapManager = GetComponent<MapManagerV2>();
        
        if (generator == null)
        {
            Debug.LogError("[MapSelector] MapGenerator not found!");
        }
    }
    
    private void Update()
    {
        // F6 : Map précédente
        if (Input.GetKeyDown(KeyCode.F6))
        {
            PreviousMap();
        }
        
        // F7 : Map suivante
        if (Input.GetKeyDown(KeyCode.F7))
        {
            NextMap();
        }
        
        // F8 : Regénérer la map actuelle (nouvelle seed)
        if (Input.GetKeyDown(KeyCode.F8))
        {
            RegenerateCurrentMap();
        }
    }
    
    public void PreviousMap()
    {
        currentMapIndex--;
        if (currentMapIndex < 0)
            currentMapIndex = availableMaps.Length - 1;
        
        LoadMapByIndex(currentMapIndex);
    }
    
    public void NextMap()
    {
        currentMapIndex++;
        if (currentMapIndex >= availableMaps.Length)
            currentMapIndex = 0;
        
        LoadMapByIndex(currentMapIndex);
    }
    
    public void LoadMapByIndex(int index)
    {
        if (index >= 0 && index < availableMaps.Length)
        {
            currentMapIndex = index;
            currentMapId = availableMaps[index];
            
            Debug.Log($"[MapSelector] Loading map: {currentMapId}");
            
            if (generator != null)
            {
                generator.LoadMap(currentMapId);
                
                if (regenerateOnChange && mapManager != null)
                {
                    // Forcer la recréation visuelle
                    mapManager.InitializeMap();
                }
            }
        }
    }
    
    public void LoadMapById(string mapId)
    {
        currentMapId = mapId;
        
        // Trouver l'index
        for (int i = 0; i < availableMaps.Length; i++)
        {
            if (availableMaps[i] == mapId)
            {
                currentMapIndex = i;
                break;
            }
        }
        
        if (generator != null)
        {
            generator.LoadMap(mapId);
            
            if (regenerateOnChange && mapManager != null)
            {
                mapManager.InitializeMap();
            }
        }
    }
    
    public void RegenerateCurrentMap()
    {
        Debug.Log($"[MapSelector] Regenerating map: {currentMapId}");
        
        if (generator != null)
        {
            // Changer la seed pour avoir une nouvelle génération
            System.Reflection.FieldInfo seedField = generator.GetType().GetField("currentMapConfig", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (seedField != null)
            {
                MapConfig config = (MapConfig)seedField.GetValue(generator);
                if (config != null)
                {
                    config.seed = Random.Range(0, 10000);
                    Debug.Log($"[MapSelector] New seed: {config.seed}");
                }
            }
            
            generator.GenerateMap();
        }
    }
    
    private void OnGUI()
    {
        // Afficher les infos de map
        GUI.Box(new Rect(10, 150, 250, 120), "Map Selector");
        GUI.Label(new Rect(20, 170, 230, 20), $"Current: {currentMapId}");
        GUI.Label(new Rect(20, 190, 230, 20), "F6: Previous Map");
        GUI.Label(new Rect(20, 210, 230, 20), "F7: Next Map");
        GUI.Label(new Rect(20, 230, 230, 20), "F8: Regenerate (new seed)");
        GUI.Label(new Rect(20, 250, 230, 20), $"Map {currentMapIndex + 1}/{availableMaps.Length}");
    }
}